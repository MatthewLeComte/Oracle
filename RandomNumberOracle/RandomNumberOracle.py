# ██████╗░██╗██╗░░░░░███████╗██╗░░░██╗
# ██╔══██╗██║██║░░░░░██╔════╝╚██╗░██╔╝
# ██████╔╝██║██║░░░░░█████╗░░░╚████╔╝░
# ██╔══██╗██║██║░░░░░██╔══╝░░░░╚██╔╝░░
# ██║░░██║██║███████╗███████╗░░░██║░░░
# ╚═╝░░╚═╝╚═╝╚══════╝╚══════╝░░░╚═╝░░░
#
# ░██████╗░░█████╗░░█████╗░██████╗░  
# ██╔════╝░██╔══██╗██╔══██╗██╔══██╗  
# ██║░░██╗░██║░░██║██║░░██║██║░░██║  
# ██║░░╚██╗██║░░██║██║░░██║██║░░██║  
# ╚██████╔╝╚█████╔╝╚█████╔╝██████╔╝  
# ░╚═════╝░░╚════╝░░╚════╝░╚═════╝░  
#
# ░█████╗░██████╗░██╗░░░
# ██╔══██╗██╔══██╗██║░░░
# ███████║██████╔╝██║░░░
# ██╔══██║██╔═══╝░██║░░░
# ██║░░██║██║░░░░░██║██╗
# ╚═╝░░╚═╝╚═╝░░░░░╚═╝╚═╝

# API Information:
# @dev: This API is created to serve as a random number oracle for use in
# smart contracts, all responses are generated by measuring the quantum
# fluctuations of a vacuum as described here: https://qrng.anu.edu.au/

#---------------------------------------------------------------------

# @author: Created by Matthew LeComte — https://MatthewLeComte.com/APIs
# @notice: For more APIs go to — https://RileyGood.com/APIs
# @dev: License Information — https://SPDX.org/licenses/MIT-advertising
#//////////////////////////////////////////////////////////////////////

# Import the "requests" library for use in 'get'ting the json file from the url below.
import requests

# The URL where the random number is generated for use in this API.
response = requests.get("https://qrng.anu.edu.au/API/jsonI.php?length=32&type=uint16&size=5",  allow_redirects=False)

# Set the base output to the correct format (json) for later sorting and cleanup.
output = response.json()

# Format the response to only a number by using ".replace" to remove the extra characters.
final_output = str(output['data']).replace(', ', '').replace(']', '').replace('[', '')


# Create a function for getting the formated "output"
# so that we can use it in FastAPI. 
def generate_number():

# Use return here instead of print as we will be
# importing this function into our FastAPI.
 return(final_output)


# Create a function for getting the formated http "status_code"
# so that we can use it in FastAPI for error prevention. 
def status_code():

# Use return here instead of print as we will be
# importing this function into our FastAPI.
 return str(response.status_code)